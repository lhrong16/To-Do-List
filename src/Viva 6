Viva 6

Hero Class
public class Hero {
    private String name;
    private String element;
    private double hp;
    private double attack;

    public Hero(String name, String element, double hp, double attack) {
        this.name = name;
        this.element = element;
        this.hp = hp;
        this.attack = attack;
    }

    public double calculateDamage(Villain enemy, int rsMultiplier) {
        double dominanceMultiplier = getDominanceMultiplier(this.element, enemy.getElement());
        double damage = this.attack * dominanceMultiplier * rsMultiplier - enemy.getDefense();
        return Math.max(damage, 1);
    }

    private double getDominanceMultiplier(String heroElement, String enemyElement) {
        if (heroElement.equals("Water") && enemyElement.equals("Fire") ||
            heroElement.equals("Fire") && enemyElement.equals("Earth") ||
            heroElement.equals("Earth") && enemyElement.equals("Water")) {
            return 1.5;
        } else if (heroElement.equals("Fire") && enemyElement.equals("Water") ||
                   heroElement.equals("Earth") && enemyElement.equals("Fire") ||
                   heroElement.equals("Water") && enemyElement.equals("Earth")) {
            return 0.5;
        } else if (heroElement.equals("Light") && enemyElement.equals("Dark") ||
                   heroElement.equals("Dark") && enemyElement.equals("Light")) {
            return 1.5;
        } else {
            return 1.0;
        }
    }

    @Override
    public String toString() {
        return "Name: " + name + "\nElement: " + element + "\nHP: " + hp + "\nAttack: " + attack;
    }
}


Villain Class
public class Villain {
    private String name;
    private String element;
    private double maxHp;
    private double hp;
    private double attack;
    private double defense;
    private int initialCd;
    private int currentCd;

    public Villain(String name, String element, double maxHp, double attack, double defense, int initialCd) {
        this.name = name;
        this.element = element;
        this.maxHp = maxHp;
        this.hp = maxHp;
        this.attack = attack;
        this.defense = defense;
        this.initialCd = initialCd;
        this.currentCd = initialCd;
    }

    public void getDamaged(double damage) {
        this.hp = Math.max(this.hp - damage, 0);
    }

    public void resetHp() {
        this.hp = this.maxHp;
    }

    public void decreaseCd() {
        this.currentCd = Math.max(this.currentCd - 1, 0);
    }

    public void resetCd() {
        this.currentCd = this.initialCd;
    }

    public String getElement() {
        return element;
    }

    public double getDefense() {
        return defense;
    }

    public double getHp() {
        return hp;
    }

    public int getCurrentCd() {
        return currentCd;
    }

    @Override
    public String toString() {
        return "Name: " + name + "\nElement: " + element + "\nHP: " + hp + "\nAttack: " + attack + "\nDefense: " + defense + "\nCurrent CD: " + currentCd;
    }
}


Team Class
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Team {
    private Hero[] deck;
    private List<Hero> heroList;
    private double hp;

    public Team(Hero[] deck) {
        this.deck = deck;
        this.heroList = new ArrayList<>();
    }

    public void formTeam() {
        heroList.clear();
        List<Hero> deckList = new ArrayList<>(List.of(deck));
        Collections.shuffle(deckList);
        for (int i = 0; i < 4; i++) {
            heroList.add(deckList.get(i));
        }
        calculateTeamHp();
    }

    private void calculateTeamHp() {
        hp = 0;
        for (Hero hero : heroList) {
            hp += hero.hp;
        }
    }

    public void getDamaged(double damage) {
        this.hp = Math.max(this.hp - damage, 0);
    }

    public void resetTeamHp() {
        calculateTeamHp();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("Team's HP: ").append(hp).append("\n");
        for (int i = 0; i < heroList.size(); i++) {
            sb.append("Hero ").append(i + 1).append("\n").append(heroList.get(i)).append("\n");
        }
        return sb.toString();
    }
}


Game Class
import java.util.Random;

public class Game {
    private static final String[] ELEMENTS = {"Water", "Fire", "Earth", "Light", "Dark"};

    public void battle(Team team, Villain enemy) {
        team.resetTeamHp();
        enemy.resetHp();
        enemy.resetCd();

        Random random = new Random();
        int round = 1;

        while (team.hp > 0 && enemy.getHp() > 0) {
            System.out.println("Round " + round);
            System.out.println("Enemy's current CD: " + enemy.getCurrentCd());

            int[] runestones = new int[5];
            for (int i = 0; i < 3; i++) {
                String element = ELEMENTS[random.nextInt(ELEMENTS.length)];
                System.out.println("- " + element);
                runestones[getElementIndex(element)]++;
            }

            for (Hero hero : team.heroList) {
                int rsMultiplier = runestones[getElementIndex(hero.element)];
                if (rsMultiplier > 0) {
                    double damage = hero.calculateDamage(enemy, rsMultiplier);
                    enemy.getDamaged(damage);
                    System.out.println(hero.name + " dealt " + damage + " damage to " + enemy.name);
                }
            }

            if (enemy.getHp() > 0 && enemy.getCurrentCd() == 1) {
                team.getDamaged(enemy.attack);
                enemy.resetCd();
                System.out.println(enemy.name + " dealt " + enemy.attack + " damage to the team");
            } else {
                enemy.decreaseCd();
            }

            System.out.println("Team's remaining HP: " + team.hp);
            System.out.println("Enemy's remaining HP: " + enemy.getHp());
            System.out.println();

            round++;
        }

        if (team.hp <= 0) {
            System.out.println("The team lose.");
        } else {
            System.out.println("The team wins.");
        }
    }

    private int getElementIndex(String element) {
        switch (element) {
            case "Water": return 0;
            case "Fire": return 1;
            case "Earth": return 2;
            case "Light": return 3;
            case "Dark": return 4;
            default: throw new IllegalArgumentException("Unknown element: " + element);
        }
    }
}


Test Program
public class TOSTest {
    public static void main(String[] args) {
        Hero molly = new Hero("Molly", "Water", 45, 20);
        Hero sean = new Hero("Sean", "Fire", 36, 24);
        Hero duncan = new Hero("Duncan", "Earth", 53, 16);
        Hero nathaniel = new Hero("Nathaniel", "Light", 37, 24);
        Hero endor = new Hero("Endor", "Dark", 43, 21);
        Hero urd = new Hero("Urd", "Water", 65, 17);
        Hero skuld = new Hero("Skuld", "Fire", 66, 16);
        Hero verthandi = new Hero("Verthandi", "Earth", 74, 13);
        Hero idun = new Hero("Idun", "Light", 59, 19);
        Hero valkyrie = new Hero("Valkyrie", "Dark", 61, 18);
        Hero poseidon = new Hero("Poseidon", "Water", 58, 19);
        Hero hephaestus = new Hero("Hephaestus", "Fire", 51, 22);
        Hero athena = new Hero("Athena", "Earth", 61, 18);
        Hero apollo = new Hero("Apollo", "Light", 55, 16);
        Hero artemis = new Hero("Artemis", "Dark", 50, 23);

        Hero[] heroes = {molly, sean, duncan, nathaniel, endor, urd, skuld, verthandi, idun, valkyrie, poseidon, hephaestus, athena, apollo, artemis};

        Villain giemsa = new Villain("Giemsa", "Water", 100, 150, 15, 2);
        Villain diablo = new Villain("Diablo", "Fire", 120, 163, 13, 3);
        Villain nidhogg = new Villain("Nidhogg", "Earth", 130, 189, 11, 4);
        Villain lucifer = new Villain("Lucifer", "Light", 110, 207, 17, 3);
        Villain odin = new Villain("Odin", "Dark", 135, 196, 14, 5);

        Team team = new Team(heroes);
        Game game = new Game();

        team.formTeam();
        System.out.println(team);

        game.battle(team, giemsa);
    }
}
